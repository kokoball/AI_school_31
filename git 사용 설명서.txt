* 깃 명령어
    git clone 레포 주소 : 다른사람이 한거 가져오기
    ls  : 현재 디렉토리 위치에서 내용 나열
    ls -a : 모든 파일 보기. (숨김 파일도)
    ls -l : 좀더 자세한 정보 출력   /   ls -al 같이 옵션 같이써도 됨
    
    cd 경로 : 다른 디렉토리로 이동
    pwd : 현재 내 위치 확인
    mkdir 디렉토리이름 : 디렉토리 생성
    touch 파일이름 : 파일 생성

    vi or vim : 파일 편집기 -> 잘 안쓸건데 궁금하면 검색
    rm -rf  :  그냥 rm은 파일 삭제, -rf 옵션을 주면 하위 디렉토리를 포함한 모든 것 삭제

* 깃 시작하기
    git init  : 원하는 디렉토리에 가서 실행
    git add 파일 : 이 파일을 버전관리 (파일을 staging area에 등록)
    git status : 버전관리 상태 확인 가능
    
    git config --global user.name "이름" : 이름등록
    git congig --global user.email 깃주소 : 이메일 등록

    git commit -m '메시지'  : 버전을 만든다 (문제가 생겼을때 이전버전으로 ~)
			staging area에 있는 파일을 local repo로 

    git log  : 생성된 버전 확인 ,  q로 나감

    git branch : 브랜치 목록 확인 / 현재 브랜치 * 표시
    git branch asdf : 이름이 asdf인 브랜치 생성
    git checkout asdf :  asdf 브랜치로 이동
    git checkout -b asdf1 : asdf1 브랜치를 만들고 바로 이동까지

    원격으로 브랜치 올릴땐
    git push origin asdf 

    다른 사람이 코드 가져올땐
    git checkout asdf  : 저장소 asdf에 체크아웃 명령으로 이동 후 
    git pull   /  ls 로 현재 로컬 파일 확인

    git branch -d subdir : subdir 브랜치 제거 



##############  지금 까지는 로컬 저장소  #######################

* 원격저장소 
repository 만들고 -> 로컬과 연결(레포의 주소 복사)

    git remote add origin "주소명"    / origin은 통상적으로 부르는 이름
    git remote -v : 로 잘 연결 되어있는지 확인 가능
    git push origin master / origin 이라는 레포의 master 브랜치에 올리겠다는 뜻

    파일 수정하면 똑같이 그 파일을 add 후 commit * 메시지에 변경내용 표기 *
    이미 원격 연결되있어서 push만 

    git pull origin master : 협업을 여러명에서 할 경우 하나의 레포에 공유
			그럴 경우 레포의 상태는 내가 작업 안했을때도 변화
			이때 업뎃된 원격 레포 상태를 내 로컬 레포와 일치하기 위해서
			git pull origin master를 해야한다.


################## 브랜치 병합 ######################
    실제 개발 현장에서는 새로운 기능의 브랜치 만들고 개발,
    태스트가 완료되면 메인 master 브랜치에 통합 이라는 흐름으로 개발 진행
    이 과정을 병합이라고 한다.

    1. 현재 분기를 master로 전환 
	git checkout master
    2. sub 브랜치 결과를 병합
	git merge asdf
    실행결과 보면 asdf 에서 만든 파일이 추가 된것을 확인가능
	git push origin master로 github에 다시 푸쉬



	Local(내 컴퓨터)			 Remote(깃헙)

working               staging        local repo           remote repo
directory                area
             ------->              ------>              ------->
              git add             git commit          git push


<--------------------------------------------------------------
					git pull
<-----------------------------------------       
		git checkout                     
<----------------------------------------- 
                        git merge                         

###########################################################

* Feature Branch Workflow : 기능별 브랜치를 만들어서 작업


git Organization은 나중에







